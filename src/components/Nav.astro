---
import SocialLinks from './SocialLinks.astro';
const navTitles = ['home', 'skills', 'projects', 'about', 'contact'];
---

<nav
  class="flex items-center justify-center absolute top-0 right-0 h-screen w-[75vw] bg-primary-dark invisible opacity-0 translate-x-full transition-all duration-500 z-40 shadow-drawer sm:w-[60vw] md:z-auto md:transform-none md:transition-none md:visible md:opacity-100 md:bg-transparent md:w-auto md:h-auto md:static md:flex-1"
  id="nav"
>
  <ul class="flex flex-col gap-9 md:flex-row md:gap-10">
    {
      navTitles.map(title => (
        <li class="cursor-pointer text-center">
          <a href={'#' + title} class="nav__link py-1 uppercase hover:border-b">
            {title}
          </a>
        </li>
      ))
    }
    <li class="text-center mb-5 md:hidden">
      <button class="btn-primary">RESUME</button>
    </li>
    <li class="md:hidden"><SocialLinks /></li>
  </ul>
</nav>

<style>
  .active {
    border-bottom: 1px solid theme('textColor.gray.100');
  }

  .visible {
    visibility: visible;
    opacity: 1;
    transform: translateX(0);
  }
</style>

<script>
  // For adding 'active' class to Nav Links according to hash in url
  const circleLinkElements = document.getElementsByClassName(
    'circle__link'
  ) as HTMLCollectionOf<HTMLAnchorElement>;

  const navLinkElements = document.getElementsByClassName(
    'nav__link'
  ) as HTMLCollectionOf<HTMLAnchorElement>;

  const linkElementsArr = [circleLinkElements, navLinkElements];

  const activeLinkHandler = (determiningValue: string): void => {
    linkElementsArr.forEach((linkElements, i) => {
      let activeLinkFound = false;

      for (const linkEl of linkElements) {
        let activeToggleEl: HTMLAnchorElement | HTMLDivElement = linkEl;
        if (i === 0) activeToggleEl = linkEl.querySelector('div')!;

        activeToggleEl.classList.remove('active');

        if (linkEl.hash === determiningValue) {
          activeToggleEl.classList.add('active');
          activeLinkFound = true;
        }
      }

      let homeEl: HTMLAnchorElement | HTMLDivElement = linkElements[0];
      if (i === 0) homeEl = linkElements[0].querySelector('div')!;

      if (!activeLinkFound) homeEl.classList.add('active');
    });
  };

  activeLinkHandler(window.location.hash);
  window.addEventListener('hashchange', () =>
    activeLinkHandler(window.location.hash)
  );

  // For Hamburger Click Functionality
  const hamburgerBtnEl = document.getElementById('hamburger-btn')!;
  const navEl = document.getElementById('nav')!;
  const backdropEl = document.getElementById('backdrop')!;

  const drawerFunctionalityHandler = (): void => {
    hamburgerBtnEl.classList.toggle('active');
    navEl.classList.toggle('visible');
    backdropEl.classList.toggle('visible');
  };

  hamburgerBtnEl.addEventListener('click', drawerFunctionalityHandler);

  // Close Drawer when clicked
  backdropEl.addEventListener('click', drawerFunctionalityHandler);

  // Change the active nav when scroll
  const sectionElements = document.querySelectorAll('section.screen');

  const obsOptions = {
    root: null,
    rootMargin: '-35% 0px -60% 0px',
  };
  const observer = new IntersectionObserver(entries => {
    entries.forEach(entry => {
      if (entry.isIntersecting) {
        const activeSectionId = '#' + entry.target.id;
        activeLinkHandler(activeSectionId);
      }
    });
  }, obsOptions);

  sectionElements.forEach(sectionEl => {
    observer.observe(sectionEl);
  });
</script>
